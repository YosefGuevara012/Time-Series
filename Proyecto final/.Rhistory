library(FactoMineR)
library(factoextra)
library(MTS)
library(ggplot2)
library(aTSA)
data1 <- read.csv("2015_2.csv", header = T, sep =",")
data1 <- read.csv("2015_2.csv", header = T, sep =",")
data1 <- read.csv("2015_2.csv", header = T, sep =",")
normalizada15 <- as.data.frame(lapply(data1[,-1], normalize))
data1 <- read.csv("2015_2.csv", header = T, sep =",")
normalizada15 <- as.data.frame(lapply(data1[,-1], normalize))
data1 <- read.csv("2015_2.csv", header = T, sep =",")
#normalizada15 <- as.data.frame(lapply(data1[,-1], normalize))
pca1<-PCA(data1[,-1])
summary(data1)
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2021.csv", header = T, sep=",")
head(data)
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
ccm(d_est)
zt <- d_est
VMAorder(zt,lag=12)
VMA1 <- VMA(zt, q = 1)
r.VMA <- refVMA(VMA1, thres = 1.5)
View(data)
View(d_est)
prd.VMA <- VMApred(r.VMA)
upper<-prd.VMA$pred+1.96*prd.VMA$se
upper
lower<-prd.VMA$pred-1.96*prd.VMA$se
lower
mq(r.VMA$residuals, adj=200)
bit <- ts(data[,2], start = c(2020, 6.5) frecuency = 20)
bit <- ts(data[,2], start = c(2020) frecuency = 20)
ts(1:10, frequency = 4, start = c(1959, 2))
ts(data[,2], frequency = 20, start = c(1959, 2))
ts(1:10, frequency = 4, start = c(1959, 2))
ts(1:10, frequency = 20, start = c(2020, 13))
ts(data[,2], frequency = 20, start = c(2020, 13))
d <- ts(data[,2], frequency = 20, start = c(2020, 13))
d
bit <- ts(data[,2], frequency = 20, start = c(2020, 6))
bit
bit <- ts(data[,2], frequency = 20, start = c(2020, 6.5))
bit
tes <- ts(data[,6], frequency = 20, start = c(2020, 6.5))
for (i in 1:12){
gt <- grangertest(bit ~ tes, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(tes ~ bit , order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
data <- read.csv("2021.csv", header = T, sep=",")
head(data)
data <- read.csv("2021.csv", header = T, sep=",")
head(data)
##  [1] "#00008B" "#46008B" "#8B008B" "#8B0046" "#8B0000" "#8B4500" "#8B8B00"
##  [8] "#468B00" "#008B00" "#008B45" "#008B8B" "#00468B"
tiempo <- seq(1:nrow(data))/248+2020.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,data[,3], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,data[,4], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,data[,5], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,data[,6], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,data[,7], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,data[,8], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,data[,9], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
ts(1:10, frequency = 4, start = c(1959, 2))
ts(data[,2], frecuency=20, strat = c(2020,6))
ts(data[,2], frecuency=20, strat = c(2020,6))
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2021.csv", header = T, sep=",")
head(data)
##  [1] "#00008B" "#46008B" "#8B008B" "#8B0046" "#8B0000" "#8B4500" "#8B8B00"
##  [8] "#468B00" "#008B00" "#008B45" "#008B8B" "#00468B"
tiempo <- seq(1:nrow(data))/248+2020.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,data[,3], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,data[,4], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,data[,5], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,data[,6], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,data[,7], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,data[,8], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,data[,9], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
### Se transforman las series a estacionarias
d_est <- as.data.frame(lapply(data[,-1],log))
d_est <- as.data.frame(lapply(d_est,diff))
#d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
#Se visualizan las series en su forma estacionaria.
tiempo <- seq(1:nrow(d_est))/247+2020.5
par(mfrow=c(2,4))
plot(tiempo,d_est[,1], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,d_est[,2], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,d_est[,3], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,d_est[,4], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,d_est[,5], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,d_est[,6], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,d_est[,7], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,d_est[,8], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
# TESLA
for (i in 1:12){
gt <- grangertest(tesla ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(amd ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(biance ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# BITCOIN
for (i in 1:12){
gt <- grangertest(bitcoin ~ tesla, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Tesla es causal del bitcoin apartir del rezago: ", i, "\n")
break
}
}
VARselect(d_est, lag.max=12)
var_s <- vars::VAR(d_est,p =1)
var_s
# plot(var_s)
var_mts <- MTS::VAR(d_est, p =1)
summary(var_mts)
var_ref <- MTS::refVAR(var_mts,thres=0.8)
seriala <- serial.test(var_s,lags.pt = 1, type = "PT.asymptotic")
seriala$serial
normalidad <- normality.test(var_s)
normalidad$jb.mul
arch1 <- arch.test(var_s, lags.multi = 1)
arch1$arch.mul
MTSplot(var_mts$residuals[,1:6])
bt <- ts(data[,2], frecuency=20, strat = c(2020,6))
ts(data[,2], frecuency=20, strat = c(2020,6))
ts(data[,2], frequency = 20, start = c(1959, 6))
ts(data[,2], frecuency=20, strat = c(2020,6))
ts(data[,2], frequency = 4, start = c(1959, 2))
ts(data[,2], frecuency=247, strat = c(2020,6))
ts(data[,2], frecuency=247, strat = c(2020,6))
ts(data[,2], frequency = 240, start = c(1959, 2))
ts(data[,2], frequency = 240, start = c(2020, 22))
ts(data[,2], frequency = 240, start = c(2020, 88))
ts(data[,2], frequency = 240, start = c(2020, 100))
bt <- ts(data[,2], frequency = 240, start = c(2020, 100))
ch <- ts(data[,3], frequency = 240, start = c(2020, 100))
bn <- ts(data[,4], frequency = 240, start = c(2020, 100))
lt <- ts(data[,5], frequency = 240, start = c(2020, 100))
tl <- ts(data[,6], frequency = 240, start = c(2020, 100))
tm <- ts(data[,7], frequency = 240, start = c(2020, 100))
am <- ts(data[,8], frequency = 240, start = c(2020, 100))
qu <- ts(data[,9], frequency = 240, start = c(2020, 100))
cbind(bt, ch, bn, lt, tl, tm, am, qu)
library(FactoMineR)
datos <- as.data.frame(cbind(bt, ch, bn, lt, tl, tm, am, qu))
d_est <- as.data.frame(lapply(datos,diff))
for (i in 1:12){
gt <- grangertest(bt ~ tl, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Tesla es causal del bitcoin apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(tl ~ bt, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Tesla es causal del bitcoin apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(tl ~ bt, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("si es causal", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(tl ~ bt, order = i, data = datos)
if(gt[2,4]<0.05){
cat("si es causal", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(bt ~ tl, order = i, data = datos)
if(gt[2,4]<0.05){
cat("si es causal", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(bt ~ tl, order = i, data = datos)
if(gt[2,4]<0.05){
cat("si es causal: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(bt ~ tl, order = i, data = datos)
if(gt[2,4]<0.05){
cat("Si es causal: ", i, "\n")
break
}
}
pca <- PCA(datos)
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2021.csv", header = T, sep=",")
head(data)
View(data)
bitcoin <- ts(data[,2], frequency = 240, start = c(2020, 100))
ethereum <- ts(data[,3], frequency = 240, start = c(2020, 100))
cardano <- ts(data[,4], frequency = 240, start = c(2020, 100))
doge <- ts(data[,5], frequency = 240, start = c(2020, 100))
bcash <- ts(data[,6], frequency = 240, start = c(2020, 100))
stellar <- ts(data[,7], frequency = 240, start = c(2020, 100))
chinlink <- ts(data[,8], frequency = 240, start = c(2020, 100))
biance <- ts(data[,9], frequency = 240, start = c(2020, 100))
lite <- ts(data[,10], frequency = 240, start = c(2020, 100))
monero <- ts(data[,11], frequency = 240, start = c(2020, 100))
bat <- ts(data[,12], frequency = 240, start = c(2020, 100))
tether <- ts(data[,13], frequency = 240, start = c(2020, 100))
tesla <- ts(data[,14], frequency = 240, start = c(2020, 100))
tsmc <- ts(data[,15], frequency = 240, start = c(2020, 100))
nvidia <- ts(data[,16], frequency = 240, start = c(2020, 100))
intel <- ts(data[,17], frequency = 240, start = c(2020, 100))
amd <- ts(data[,18], frequency = 240, start = c(2020, 100))
qualcom <- ts(data[,19], frequency = 240, start = c(2020, 100))
bitcoin <- ts(data[,2], frequency = 240, start = c(2020, 100))
ethereum <- ts(data[,3], frequency = 240, start = c(2020, 100))
cardano <- ts(data[,4], frequency = 240, start = c(2020, 100))
doge <- ts(data[,5], frequency = 240, start = c(2020, 100))
bcash <- ts(data[,6], frequency = 240, start = c(2020, 100))
stellar <- ts(data[,7], frequency = 240, start = c(2020, 100))
chinlink <- ts(data[,8], frequency = 240, start = c(2020, 100))
biance <- ts(data[,9], frequency = 240, start = c(2020, 100))
lite <- ts(data[,10], frequency = 240, start = c(2020, 100))
monero <- ts(data[,11], frequency = 240, start = c(2020, 100))
bat <- ts(data[,12], frequency = 240, start = c(2020, 100))
tether <- ts(data[,13], frequency = 240, start = c(2020, 100))
tesla <- ts(data[,14], frequency = 240, start = c(2020, 100))
tsmc <- ts(data[,15], frequency = 240, start = c(2020, 100))
nvidia <- ts(data[,16], frequency = 240, start = c(2020, 100))
intel <- ts(data[,17], frequency = 240, start = c(2020, 100))
amd <- ts(data[,18], frequency = 240, start = c(2020, 100))
qualcom <- ts(data[,19], frequency = 240, start = c(2020, 100))
datos <- as.data.frame(cbind(bitcoin, ethereum, cardano, doge, bcash, stellar, chinlink, biance, lite, monero, bat, tether, tesla, tsmc, nvidia, intel, amd,qualcom))
library(FactoMineR)
d_est <- as.data.frame(lapply(datos,diff))
d_est <- as.data.frame(lapply(datos,diff))
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2021.csv", header = T, sep=",")
head(data)
bitcoin <- ts(data[,2], frequency = 240, start = c(2020, 100))
ethereum <- ts(data[,3], frequency = 240, start = c(2020, 100))
cardano <- ts(data[,4], frequency = 240, start = c(2020, 100))
doge <- ts(data[,5], frequency = 240, start = c(2020, 100))
bcash <- ts(data[,6], frequency = 240, start = c(2020, 100))
stellar <- ts(data[,7], frequency = 240, start = c(2020, 100))
chinlink <- ts(data[,8], frequency = 240, start = c(2020, 100))
biance <- ts(data[,9], frequency = 240, start = c(2020, 100))
lite <- ts(data[,10], frequency = 240, start = c(2020, 100))
monero <- ts(data[,11], frequency = 240, start = c(2020, 100))
bat <- ts(data[,12], frequency = 240, start = c(2020, 100))
tether <- ts(data[,13], frequency = 240, start = c(2020, 100))
tesla <- ts(data[,14], frequency = 240, start = c(2020, 100))
tsmc <- ts(data[,15], frequency = 240, start = c(2020, 100))
nvidia <- ts(data[,16], frequency = 240, start = c(2020, 100))
intel <- ts(data[,17], frequency = 240, start = c(2020, 100))
amd <- ts(data[,18], frequency = 240, start = c(2020, 100))
qualcom <- ts(data[,19], frequency = 240, start = c(2020, 100))
datos <- as.data.frame(cbind(bitcoin, ethereum, cardano, doge, bcash, stellar, chinlink, biance, lite, monero, bat, tether, tesla, tsmc, nvidia, intel, amd,qualcom))
d_est <- as.data.frame(lapply(datos,diff))
for (i in 1:12){
gt <- grangertest(bitcoin ~ tesla, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(tesla ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(ethereum ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(ethereum ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(lite ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(nvidia ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(amd ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(bitcoin ~ tesla, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(bitcoin ~ ethereum, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(bitcoin ~ lite, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(nvidia ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
for (i in 1:20){
gt <- grangertest(nvidia ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
pca <- PCA(datos)
VARselect(d_est)
var_mts <- vars::VAR(d_est, p =1)
var_s <- vars::VAR(d_est, p =1)
seriala <- serial.test(var_s,lags.pt = 1, type = "PT.asymptotic")
seriala$serial
normalidad <- normality.test(var_s)
normalidad$jb.mul
arch1 <- arch.test(var_s, lags.multi = 1)
arch1$arch.mul
var_s <- vars::VAR(d_est, p =10)
seriala <- serial.test(var_s,lags.pt = 1, type = "PT.asymptotic")
seriala$serial
normalidad <- normality.test(var_s)
normalidad$jb.mul
arch1 <- arch.test(var_s, lags.multi = 1)
arch1$arch.mul
VMAorder(var_s)
write.table(d_est, file="Data.csv", sep = ",")
var_s <- MTS::VAR(d_est, p =10)
var_s <- MTS::VAR(d_est, p =1)
``
var_s <- MTS::VAR(d_est, p =1)
normalidad <- normality.test(var_s)
mq(var_s)
mq(var_s$residuals)
mq(var_s$residuals, adj=20)
mq(var_s$residuals, adj=20)
library(FactoMineR)
library(factoextra)
library(MTS)
library(ggplot2)
library(aTSA)
# funcion de normalización usando el rango
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data1 <- read.csv("2021.csv", header = T, sep =",")
normalizada15 <- as.data.frame(lapply(data1[,-1], normalize))
pca1<-PCA(data1[,-1])
summary(data1)
?
s
?PCA
data1 <- read.csv("2021.csv", header = T, sep =",")
normalizada15 <- as.data.frame(lapply(data1[,-1], normalize))
pca1<-PCA(data1[,-1], scale.unit = F)
summary(data1)
data1 <- read.csv("2021.csv", header = T, sep =",")
normalizada15 <- as.data.frame(lapply(data1[,-1], normalize))
pca1<-PCA(data1[,-1], scale.unit = T)
summary(data1)
View(d_est)
