library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2015.csv", header = T, sep=",")
head(data)
##  [1] "#00008B" "#46008B" "#8B008B" "#8B0046" "#8B0000" "#8B4500" "#8B8B00"
##  [8] "#468B00" "#008B00" "#008B45" "#008B8B" "#00468B"
tiempo <- seq(1:nrow(data))/248+2020.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,data[,3], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,data[,4], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,data[,5], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,data[,6], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,data[,7], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,data[,8], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,data[,9], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
#Se visualizan las series en su forma estacionaria.
tiempo <- seq(1:nrow(d_est))/247+2020.5
par(mfrow=c(2,4))
plot(tiempo,d_est[,1], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,d_est[,2], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,d_est[,3], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,d_est[,4], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,d_est[,5], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,d_est[,6], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,d_est[,7], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,d_est[,8], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
# TESLA
for (i in 1:12){
gt <- grangertest(tesla ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(amd ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(biance ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# BITCOIN
for (i in 1:12){
gt <- grangertest(bitcoin ~ tesla, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Tesla es causal del bitcoin apartir del rezago: ", i, "\n")
break
}
}
VARselect(d_est, lag.max=12)
var_s <- vars::VAR(d_est,p =1)
var_s
# plot(var_s)
var_mts <- MTS::VAR(d_est, p =1)
summary(var_mts)
var_ref <- MTS::refVAR(var_mts,thres=0.8)
seriala <- serial.test(var_s,lags.pt = 1, type = "PT.asymptotic")
seriala$serial
normalidad <- normality.test(var_s)
normalidad$jb.mul
arch1 <- arch.test(var_s, lags.multi = 1)
arch1$arch.mul
MTSplot(var_mts$residuals[,1:6])
bitcoin <- ts(d_est[,1], frequency = 240, start = c(2020, 100))
bcash <- ts(d_est[,2], frequency = 240, start = c(2020, 100))
biance <- ts(d_est[,3], frequency = 240, start = c(2020, 100))
lite <- ts(d_est[,4], frequency = 240, start = c(2020, 100))
tesla <- ts(d_est[,5], frequency = 240, start = c(2020, 100))
tsmc <- ts(d_est[,6], frequency = 240, start = c(2020, 100))
amd <- ts(d_est[,7], frequency = 240, start = c(2020, 100))
qualcom <- ts(d_est[,8], frequency = 240, start = c(2020, 100))
datos <- as.data.frame(cbind(bitcoin,bcash,biance,lite,tesla,tsmc,amd,qualcom))
head(datos)
for (i in 1:20){
gt <- grangertest(qualcom ~ bitcoin, order = i, data = datos)
if(gt[2,4]<0.05){
cat("Si es causal de orden: ", i, "\n")
break
}
}
VARselect(datos)
var_s <- vars::VAR(datos, p =1)
seriala <- serial.test(var_s,lags.pt = 1, type = "PT.asymptotic")
seriala$serial
normalidad <- normality.test(var_s)
normalidad$jb.mul
arch1 <- arch.test(var_s, lags.multi = 1)
arch1$arch.mul
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2015.csv", header = T, sep=",")
head(data)
##  [1] "#00008B" "#46008B" "#8B008B" "#8B0046" "#8B0000" "#8B4500" "#8B8B00"
##  [8] "#468B00" "#008B00" "#008B45" "#008B8B" "#00468B"
tiempo <- seq(1:nrow(data))/248+2020.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,data[,3], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,data[,4], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,data[,5], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,data[,6], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,data[,7], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,data[,8], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,data[,9], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
##  [1] "#00008B" "#46008B" "#8B008B" "#8B0046" "#8B0000" "#8B4500" "#8B8B00"
##  [8] "#468B00" "#008B00" "#008B45" "#008B8B" "#00468B"
tiempo <- seq(1:nrow(data))/597+2015.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,data[,3], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,data[,4], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,data[,5], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,data[,6], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,data[,7], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,data[,8], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,data[,9], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
#Se visualizan las series en su forma estacionaria.
tiempo <- seq(1:nrow(d_est))/596+2015.5
par(mfrow=c(2,4))
plot(tiempo,d_est[,1], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,d_est[,2], ylab = "B.Cash", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,d_est[,3], ylab = "Biance", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,d_est[,4], ylab = "Lite", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,d_est[,5], ylab = "Tesla", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,d_est[,6], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,d_est[,7], ylab = "AMD", xlab="Tiempo", type="l", col = "#468B00")
plot(tiempo,d_est[,8], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#008B00")
# TESLA
for (i in 1:12){
gt <- grangertest(tesla ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(amd ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(amd ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(biance ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
data <- read.csv("2015.csv", header = T, sep=",")
head(data)
##  [1] "#00008B" "#46008B" "#8B008B" "#8B0046" "#8B0000" "#8B4500" "#8B8B00"
##  [8] "#468B00" "#008B00" "#008B45" "#008B8B" "#00468B"
tiempo <- seq(1:nrow(data))/597+2015.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,data[,3], ylab = "Dogecoin", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,data[,4], ylab = "Litecoin", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,data[,5], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,data[,6], ylab = "Nvidia", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,data[,7], ylab = "Intel", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,data[,8], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#468B00")
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
#Se visualizan las series en su forma estacionaria.
tiempo <- seq(1:nrow(d_est))/596+2015.5
par(mfrow=c(2,4))
plot(tiempo,data[,2], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
#Se visualizan las series en su forma estacionaria.
tiempo <- seq(1:nrow(d_est))/596+2015.5
par(mfrow=c(2,4))
plot(tiempo,d_est[,1], ylab = "Bitcoin", xlab="Tiempo", type="l", col = "#00008B")
plot(tiempo,d_est[,2], ylab = "Dogecoin", xlab="Tiempo", type="l", col = "#46008B")
plot(tiempo,d_est[,3], ylab = "Litecoin", xlab="Tiempo", type="l", col = "#8B008B")
plot(tiempo,d_est[,4], ylab = "TSMC", xlab="Tiempo", type="l", col = "#8B0046")
plot(tiempo,d_est[,5], ylab = "Nvidia", xlab="Tiempo", type="l", col = "#8B4500")
plot(tiempo,d_est[,6], ylab = "Intel", xlab="Tiempo", type="l", col = "#8B8B00")
plot(tiempo,d_est[,7], ylab = "Qualcom", xlab="Tiempo", type="l", col = "#468B00")
# TESLA
for (i in 1:12){
gt <- grangertest(tesla ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# Dogecoin
for (i in 1:12){
gt <- grangertest(Dogecoin ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# Dogecoin
for (i in 1:12){
gt <- grangertest(Dogecoin ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# Dogecoin
for (i in 1:12){
gt <- grangertest(Doge ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# Dogecoin
for (i in 1:12){
gt <- grangertest(doge ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
# Dogecoin
for (i in 1:12){
gt <- grangertest(doge ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
for (i in 1:12){
gt <- grangertest(little ~ bitcoin, order = i, data = d_est)
if(gt[2,4]<0.05){
cat("Bitcoin es causal de la otra variable apartir del rezago: ", i, "\n")
break
}
}
VARselect(d_est, lag.max=12)
var_s <- vars::VAR(d_est,p =1)
var_s
var_s <- vars::VAR(d_est,p =1)
summary(var_s)
var_mts <- MTS::VAR(d_est, p =1)
summary(var_mts)
var_ref <- MTS::refVAR(var_mts,thres=0.8)
seriala <- serial.test(var_s,lags.pt = 1, type = "PT.asymptotic")
seriala$serial
normalidad <- normality.test(var_s)
normalidad$jb.mul
arch1 <- arch.test(var_s, lags.multi = 1)
arch1$arch.mul
MTSplot(var_mts$residuals[,1:6])
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2015.csv", header = T, sep=",")
head(data)
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
ccm(d_est)
zt <- d_est
VMAorder(zt,lag=12)
VMA1 <- VMA(zt, q = 12)
r.VMA <- refVMA(VMA1, thres = 1.5)
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2015.csv", header = T, sep=",")
head(data)
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
zt <- d_est
varma = VARMA(zt,p=1,q=1)
zt <- d_est
varma = VARMA(zt,p=1,q=1)
zt <- d_est
varma = VARMA(zt,p=1,q=1)
library(MTS)
library(lmtest)
library(vars)
data <- read.csv("2015.csv", header = T, sep=",")
head(data)
### Se transforman las series a estacionarias
#d_est <- as.data.frame(lapply(data[,-1],log))
#d_est <- as.data.frame(lapply(d_est,diff))
d_est <- as.data.frame(lapply(data[,-1],diff))
head(d_est)
zt <- d_est
varma = VARMA(zt,p=1,q=1)
library(FactoMineR)
library(factoextra)
library(MTS)
library(ggplot2)
library(aTSA)
# funcion de normalización usando el rango
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data <- read.csv("crypto.csv", header = T, sep =",")
pca<-PCA(data1[,-1])
# funcion de normalización usando el rango
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
library(FactoMineR)
library(factoextra)
library(MTS)
library(ggplot2)
library(aTSA)
data <- read.csv("crypto.csv", header = T, sep =",")
pca<-PCA(data[,-1])
summary(pca)
summary(pca)
fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
pca$var
pca$var$contrib
rowsum(pca$var$contrib[,1:2])
rowsum(pca$var$contrib[,1])
pca$var$contrib$Dim.1
pca$var$contrib
K <- pca$var$contrib[,1:2]
k
K
rowsum(K)
?rowsum
summary(pca)
fviz_pca_var(pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
