cat("phi2: The third null hypothesis is rejected, unit root is not present\n")
cat("      there is no trend, and there is drift\n")
}
} else {
cat("phi3: The second null hypothesis is rejected, unit root is not present\n")
cat("      and there may or may not be trend\n")
warning("Presence of trend is inconclusive.")
if(phi2_teststat_wi_crit) {
# Third null hypothesis is not rejected
# a0-drift = gamma = a2-trend = 0
cat("phi2: The third null hypothesis is not rejected, unit root is present\n")
cat("      there is no trend, and there is no drift\n")
warning("This is inconsistent with the first and second null hypothesis.")
} else {
# Third null hypothesis is rejected
cat("phi2: The third null hypothesis is rejected, unit root is not present\n")
cat("      there may or may not be trend, and there may or may not be drift\n")
warning("Presence of trend and drift is inconclusive.")
}
}
}
} else warning('urdf model type is not one of none, drift, or trend')
cat("========================================================================\n")
}
autoUrca <-function(df,T.type,Lags=1, lv="5pct", analysis = TRUE){
## Enter the DF to analyze
## Enter the Test type to use, either "none", "drift" or "trend".
names <- colnames(df)
len <- ncol(df)
for(i in 1:len){
cat("---------------------------------","\n")
cat("Serie " ,names[i],"\n")
ur <- ur.df(df[, i], type = T.type,lags = Lags)
test <- summary(ur)
cat("Statistic:","\n")
print(test@teststat)
cat("\n")
cat("Critical:","\n")
print(test@teststat)
if(analysis == TRUE){
interp_urdf(ur,level=lv)
}
}
}
s.autoUrca <-function(df,T.type,Lags=1, lv="5pct", analysis = TRUE){
## Enter the values to analyze
## Enter the Test type to use, either "none", "drift" or "trend".
ur <- ur.df(df, type = T.type,lags = Lags)
test <- summary(ur)
cat("Statistic:","\n")
print(test@teststat)
cat("\n")
cat("Critical:","\n")
print(test@cval)
if(analysis == TRUE){
interp_urdf(ur,level=lv)
}
}
autoUrca(Canada,"trend",lv="1pct", Lags = 5, analysis = T)
n_diferenciar <- function(df){
for(i in 1:ncol(df)){
cat("Se debe diferencia la ST ", names(df)[i]," :", ndiffs(df[,i]), " veces.\n")
}
}
n_diferenciar(Canada)
le <- log(Canada[,1])
lp <- log(Canada[,2])
lr <- log(Canada[,3])
lu <- log(Canada[,4])
lC <- cbind(le,lp,lr,lu)
par(mfrow=c(2,2))
plot(le, typ= "l", col="blue")
plot(lp, typ= "l", col="red")
plot(lr, typ= "l", col="green")
plot(lu, typ= "l", col="black")
n_diferenciar(lC)
ed <- diff(Canada[1])
pd <- diff(Canada[1])
rd <- diff(Canada[1])
ud <- diff(Canada[1])
dC <- cbind(ed,pd,rd,ud)
par(mfrow=c(2,2))
plot(ed, typ= "l", col="blue")
ed <- diff(Canada[,1])
pd <- diff(Canada[,2])
rd <- diff(Canada[,3])
ud <- diff(Canada[,4])
dC <- cbind(ed,pd,rd,ud)
par(mfrow=c(2,2))
plot(ed, typ= "l", col="blue")
plot(pd, typ= "l", col="red")
plot(rd, typ= "l", col="green")
plot(ud)
autoUrca(dC,"trend",lv="1pct", Lags = 5, analysis = T)
ed <- diff(ed)
pd <- diff(pd)
rd <- diff(rd)
ud <- diff(ud)
dC <- cbind(ed,pd,rd,ud)
par(mfrow=c(2,2))
plot(ed, typ= "l", col="blue")
plot(pd, typ= "l", col="red")
plot(rd, typ= "l", col="green")
plot(ud)
autoUrca(dC,"trend",lv="1pct", Lags = 5, analysis = T)
autoUrca(dC,"trend",lv="5pct", Lags = 5, analysis = T)
autoUrca(dC,"none",lv="5pct", Lags = 3, analysis = T)
adf.test(de)
adf.test(de)
adf.test(de,3)
adf.test(ed,3)
adf.test(ed,3)
adf.test(ed,3)
adf.test(ed,nlag=3,output=T)
library("vars");
library(MTS)
library(mvtnorm)
library(urca)
library(tseries)
library(ppcor)
library(TSA)
library(forecast)
library(ggplot2)
library(Ecdat)
library(vars)
data("Canada");
head(Canada)
par(mfrow=c(2,2))
plot(Canada[,1], xlab= "time", ylab = "e")
plot(Canada[,2], xlab= "time", ylab = "prod")
plot(Canada[,3], xlab= "time", ylab = "rw")
plot(Canada[,4], xlab= "time", ylab = "U")
############################################################################################
# This R function helps to interpret the output of the urca::ur.df function.
# The rules are based on https://stats.stackexchange.com/questions/24072/interpreting-rs-ur-df-dickey-fuller-unit-root-test-results
#
# urdf is the output of the urca::ur.df function
# level is one of c("1pct", "5pct", "10pct")
#
# Author: Hank Roark
# Date: October 2019
############################################################################################
interp_urdf <- function(urdf, level="5pct") {
if(class(urdf) != "ur.df") stop('parameter is not of class ur.df from urca package')
if(!(level %in% c("1pct", "5pct", "10pct") ) ) stop('parameter level is not one of 1pct, 5pct, or 10pct')
cat("========================================================================\n")
cat( paste("At the", level, "level:\n") )
if(urdf@model == "none") {
cat("The model is of type none\n")
tau1_crit = urdf@cval["tau1",level]
tau1_teststat = urdf@teststat["statistic","tau1"]
tau1_teststat_wi_crit = tau1_teststat > tau1_crit
if(tau1_teststat_wi_crit) {
cat("tau1: The null hypothesis is not rejected, unit root is present\n")
} else {
cat("tau1: The null hypothesis is rejected, unit root is not present\n")
}
} else if(urdf@model == "drift") {
cat("The model is of type drift\n")
tau2_crit = urdf@cval["tau2",level]
tau2_teststat = urdf@teststat["statistic","tau2"]
tau2_teststat_wi_crit = tau2_teststat > tau2_crit
phi1_crit = urdf@cval["phi1",level]
phi1_teststat = urdf@teststat["statistic","phi1"]
phi1_teststat_wi_crit = phi1_teststat < phi1_crit
if(tau2_teststat_wi_crit) {
# Unit root present branch
cat("tau2: The first null hypothesis is not rejected, unit root is present\n")
if(phi1_teststat_wi_crit) {
cat("phi1: The second null hypothesis is not rejected, unit root is present\n")
cat("      and there is no drift.\n")
} else {
cat("phi1: The second null hypothesis is rejected, unit root is present\n")
cat("      and there is drift.\n")
}
} else {
# Unit root not present branch
cat("tau2: The first null hypothesis is rejected, unit root is not present\n")
if(phi1_teststat_wi_crit) {
cat("phi1: The second null hypothesis is not rejected, unit root is present\n")
cat("      and there is no drift.\n")
warning("This is inconsistent with the first null hypothesis.")
} else {
cat("phi1: The second null hypothesis is rejected, unit root is not present\n")
cat("      and there is drift.\n")
}
}
} else if(urdf@model == "trend") {
cat("The model is of type trend\n")
tau3_crit = urdf@cval["tau3",level]
tau3_teststat = urdf@teststat["statistic","tau3"]
tau3_teststat_wi_crit = tau3_teststat > tau3_crit
phi2_crit = urdf@cval["phi2",level]
phi2_teststat = urdf@teststat["statistic","phi2"]
phi2_teststat_wi_crit = phi2_teststat < phi2_crit
phi3_crit = urdf@cval["phi3",level]
phi3_teststat = urdf@teststat["statistic","phi3"]
phi3_teststat_wi_crit = phi3_teststat < phi3_crit
if(tau3_teststat_wi_crit) {
# First null hypothesis is not rejected, Unit root present branch
cat("tau3: The first null hypothesis is not rejected, unit root is present\n")
if(phi3_teststat_wi_crit) {
# Second null hypothesis is not rejected
cat("phi3: The second null hypothesis is not rejected, unit root is present\n")
cat("      and there is no trend\n")
if(phi2_teststat_wi_crit) {
# Third null hypothesis is not rejected
# a0-drift = gamma = a2-trend = 0
cat("phi2: The third null hypothesis is not rejected, unit root is present\n")
cat("      there is no trend, and there is no drift\n")
} else {
# Third null hypothesis is rejected
cat("phi2: The third null hypothesis is rejected, unit root is present\n")
cat("      there is no trend, and there is drift\n")
}
}
else {
# Second null hypothesis is rejected
cat("phi3: The second null hypothesis is rejected, unit root is present\n")
cat("      and there is trend\n")
if(phi2_teststat_wi_crit) {
# Third null hypothesis is not rejected
# a0-drift = gamma = a2-trend = 0
cat("phi2: The third null hypothesis is not rejected, unit root is present\n")
cat("      there is no trend, and there is no drift\n")
warning("This is inconsistent with the second null hypothesis.")
} else {
# Third null hypothesis is rejected
cat("phi2: The third null hypothesis is rejected, unit root is present\n")
cat("      there is trend, and there may or may not be drift\n")
warning("Presence of drift is inconclusive.")
}
}
} else {
# First null hypothesis is rejected, Unit root not present branch
cat("tau3: The first null hypothesis is rejected, unit root is not present\n")
if(phi3_teststat_wi_crit) {
cat("phi3: The second null hypothesis is not rejected, unit root is present\n")
cat("      and there is no trend\n")
warning("This is inconsistent with the first null hypothesis.")
if(phi2_teststat_wi_crit) {
# Third null hypothesis is not rejected
# a0-drift = gamma = a2-trend = 0
cat("phi2: The third null hypothesis is not rejected, unit root is present\n")
cat("      there is no trend, and there is no drift\n")
warning("This is inconsistent with the first null hypothesis.")
} else {
# Third null hypothesis is rejected
cat("phi2: The third null hypothesis is rejected, unit root is not present\n")
cat("      there is no trend, and there is drift\n")
}
} else {
cat("phi3: The second null hypothesis is rejected, unit root is not present\n")
cat("      and there may or may not be trend\n")
warning("Presence of trend is inconclusive.")
if(phi2_teststat_wi_crit) {
# Third null hypothesis is not rejected
# a0-drift = gamma = a2-trend = 0
cat("phi2: The third null hypothesis is not rejected, unit root is present\n")
cat("      there is no trend, and there is no drift\n")
warning("This is inconsistent with the first and second null hypothesis.")
} else {
# Third null hypothesis is rejected
cat("phi2: The third null hypothesis is rejected, unit root is not present\n")
cat("      there may or may not be trend, and there may or may not be drift\n")
warning("Presence of trend and drift is inconclusive.")
}
}
}
} else warning('urdf model type is not one of none, drift, or trend')
cat("========================================================================\n")
}
autoUrca <-function(df,T.type,Lags=1, lv="5pct", analysis = TRUE){
## Enter the DF to analyze
## Enter the Test type to use, either "none", "drift" or "trend".
names <- colnames(df)
len <- ncol(df)
for(i in 1:len){
cat("---------------------------------","\n")
cat("Serie " ,names[i],"\n")
ur <- ur.df(df[, i], type = T.type,lags = Lags)
test <- summary(ur)
cat("Statistic:","\n")
print(test@teststat)
cat("\n")
cat("Critical:","\n")
print(test@teststat)
if(analysis == TRUE){
interp_urdf(ur,level=lv)
}
}
}
s.autoUrca <-function(df,T.type,Lags=1, lv="5pct", analysis = TRUE){
## Enter the values to analyze
## Enter the Test type to use, either "none", "drift" or "trend".
ur <- ur.df(df, type = T.type,lags = Lags)
test <- summary(ur)
cat("Statistic:","\n")
print(test@teststat)
cat("\n")
cat("Critical:","\n")
print(test@cval)
if(analysis == TRUE){
interp_urdf(ur,level=lv)
}
}
autoUrca(Canada,"trend",lv="1pct", Lags = 5, analysis = T)
n_diferenciar <- function(df){
for(i in 1:ncol(df)){
cat("Se debe diferencia la ST ", names(df)[i]," :", ndiffs(df[,i]), " veces.\n")
}
}
n_diferenciar(Canada)
ed <- diff(Canada[,1])
pd <- diff(Canada[,2])
rd <- diff(Canada[,3])
ud <- diff(Canada[,4])
dC <- cbind(ed,pd,rd,ud)
par(mfrow=c(2,2))
plot(ed, typ= "l", col="blue")
plot(pd, typ= "l", col="red")
plot(rd, typ= "l", col="green")
plot(ud)
autoUrca(dC,"trend",lv="1pct", Lags = 5, analysis = T)
ed <- diff(ed)
pd <- diff(pd)
rd <- diff(rd)
ud <- diff(ud)
dC <- cbind(ed,pd,rd,ud)
par(mfrow=c(2,2))
plot(ed, typ= "l", col="blue")
plot(pd, typ= "l", col="red")
plot(rd, typ= "l", col="green")
plot(ud)
autoUrca(dC,"none",lv="5pct", Lags = 3, analysis = T)
adf.test(ed,nlag=3,output=T)
grangertest(ed~pd, order=2)
# Causalidad de granger
# Ho:  pd no causa en sentido de granger a ed >0.05
# Ha:  pd  causa en sentido de granger a ed <0.05
grangertest(ed,pd, order=2)
# Causalidad de granger
# Ho:  pd no causa en sentido de granger a ed >0.05
# Ha:  pd  causa en sentido de granger a ed <0.05
grangertest(pd,ed, order=2)
ts.plot(dC)
ts.plot(dC, col=c("red", "blue", "orange", "black"))
ts.plot(dC, col=c("red", "blue", "orange", "black"))
for(i in 1:12){
ifelse(grangertest(pd,ed, order=i)< 0.05,cat("la segunda causa la primera en el orden: ",i),"No hay causalidad de la segunda con la primera")
}
# Causalidad de granger
# Ho:  ed no causa en sentido de granger a pd >0.05
# Ha:  ed  causa en sentido de granger a pd <0.05
k<-grangertest(pd,ed, order=2)
k$Pr(>F)
for(i in 1:12){
ifelse(grangertest(pd,ed, order=i)$`Pr(>F)`< 0.05,cat("la segunda causa la primera en el orden: ",i),"No hay causalidad de la segunda con la primera")
}
k$`Pr(>F)`
# Causalidad de granger
# Ho:  ed no causa en sentido de granger a pd >0.05
# Ha:  ed  causa en sentido de granger a pd <0.05
k<-grangertest(pd,ed, order=2)
# Causalidad de granger
# Ho:  ed no causa en sentido de granger a pd >0.05
# Ha:  ed  causa en sentido de granger a pd <0.05
grangertest(pd,ed, order=2)
VARselect(dC, lag.max = 12)
var3 <- VAR(dc, p=3)
var3 <- VAR(dC, p=3)
summary(var3)
var3 <- VAR(dC, p=3)
var3
summary(var3)
var3 <- VAR(dC, p=3)
var3
summary(var3)
var3
library(tseries)
library(ppcor)
library(TSA)
library(forecast)
library(ggplot2)
library(Ecdat)
library(vars)
library("vars")
data("Canada")
Canada <- as.data.frame(Canada)
attach(Canada)
par(mfrow=c(2,2))
plot(e, typ= "l", col="blue",)
plot(prod, typ= "l", col="red")
plot(rw, typ= "l", col="green")
plot(U, typ= "l", col="black")
n_diferenciar <- function(df){
for(i in 1:ncol(df)){
cat("Se debe diferencia la ST ", names(df)[i]," :", ndiffs(df[,i]), " veces.\n")
}
}
n_diferenciar(Canada)
e_diff <- diff(diff(e))
p_diff <- diff(diff(prod))
r_diff <- diff(diff(rw))
U_diff <- diff(diff(U))
par(mfrow=c(2,2))
plot(e_diff, typ= "l", col="blue", ylim=c(-2,2))
plot(p_diff, typ= "l", col="red")
plot(r_diff, typ= "l", col="green")
plot(U_diff, typ= "l", col="black")
C_diff <-cbind(e_diff,p_diff,r_diff,U_diff)
head(C_diff)
Var1 <- VAR(C_diff, p=1)
Var1
summary(Var1)
knitr::include_graphics('e.PNG')
knitr::include_graphics('p.PNG')
knitr::include_graphics('r.PNG')
knitr::include_graphics('u.PNG')
seriala <- serial.test(Var1, lags.pt=1, type="PT.asymptotic")
library(tseries)
library(ppcor)
library(TSA)
library(forecast)
library(ggplot2)
library(Ecdat)
library(vars)
library("vars")
data("Canada")
Canada <- as.data.frame(Canada)
attach(Canada)
par(mfrow=c(2,2))
plot(e, typ= "l", col="blue",)
plot(prod, typ= "l", col="red")
plot(rw, typ= "l", col="green")
plot(U, typ= "l", col="black")
n_diferenciar <- function(df){
for(i in 1:ncol(df)){
cat("Se debe diferencia la ST ", names(df)[i]," :", ndiffs(df[,i]), " veces.\n")
}
}
n_diferenciar(Canada)
e_diff <- diff(diff(e))
p_diff <- diff(diff(prod))
r_diff <- diff(diff(rw))
U_diff <- diff(diff(U))
par(mfrow=c(2,2))
plot(e_diff, typ= "l", col="blue", ylim=c(-2,2))
plot(p_diff, typ= "l", col="red")
plot(r_diff, typ= "l", col="green")
plot(U_diff, typ= "l", col="black")
C_diff <-cbind(e_diff,p_diff,r_diff,U_diff)
head(C_diff)
Var1 <- VAR(C_diff, p=1)
Var1
summary(Var1)
knitr::include_graphics('e.PNG')
knitr::include_graphics('p.PNG')
knitr::include_graphics('r.PNG')
knitr::include_graphics('u.PNG')
seriala <- serial.test(Var1, lags.pt=1, type="PT.asymptotic")
library(tseries)
library(ppcor)
library(TSA)
library(forecast)
library(ggplot2)
library(Ecdat)
library(vars)
library("vars")
data("Canada")
Canada <- as.data.frame(Canada)
attach(Canada)
par(mfrow=c(2,2))
plot(e, typ= "l", col="blue",)
plot(prod, typ= "l", col="red")
plot(rw, typ= "l", col="green")
plot(U, typ= "l", col="black")
n_diferenciar <- function(df){
for(i in 1:ncol(df)){
cat("Se debe diferencia la ST ", names(df)[i]," :", ndiffs(df[,i]), " veces.\n")
}
}
n_diferenciar(Canada)
e_diff <- diff(diff(e))
p_diff <- diff(diff(prod))
r_diff <- diff(diff(rw))
U_diff <- diff(diff(U))
par(mfrow=c(2,2))
plot(e_diff, typ= "l", col="blue", ylim=c(-2,2))
plot(p_diff, typ= "l", col="red")
plot(r_diff, typ= "l", col="green")
plot(U_diff, typ= "l", col="black")
C_diff <-cbind(e_diff,p_diff,r_diff,U_diff)
head(C_diff)
Var1 <- VAR(C_diff, p=1)
Var1
summary(Var1)
knitr::include_graphics('e.PNG')
knitr::include_graphics('p.PNG')
knitr::include_graphics('r.PNG')
knitr::include_graphics('u.PNG')
seriala <- serial.test(Var1, lags.pt=1, type="PT.asymptotic")
seriala$serial
normalidad <- normality.test(Var1)
normalidad$jb.mul
arch1 <- arch.test(Var1, lags.multi = 1)
arch1$arch.mul
imr_ed <- irf(Var1, response = "e_diff", n.ahead = 5, bool=T)
imr_pd <- irf(Var1, response = "p_diff", n.ahead = 5, bool=T)
imr_rd <- irf(Var1, response = "r_diff", n.ahead = 5, bool=T)
imr_Ud <- irf(Var1, response = "U_diff", n.ahead = 5, bool=T)
plot(imr_ed)
